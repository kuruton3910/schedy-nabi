# JDBC URL
spring.datasource.url=${SPRING_DATASOURCE_URL}
# 接続ユーザー名
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
# 接続パスワード
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# カスタム環境変数
SECURITY_MASTER_KEY=${SECURITY_MASTER_KEY}
SECURITY_SYNC_API_KEY=${SECURITY_SYNC_API_KEY}
JWT_SECRET=${JWT_SECRET}

# (オプション) JPA/Hibernateの設定
# Renderでは環境変数のSPRING_JPA_HIBERNATE_DDL_AUTOが優先される
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL}
spring.jpa.properties.hibernate.connection.provider_disables_pooling=true

# -------------------------------
# Production / deployment tuning
# -------------------------------
# Limit embedded Tomcat worker threads to avoid creating many JVM threads
# Set via env: SPRING_TOMCAT_MAX_THREADS (default 50)
server.tomcat.threads.max=${SPRING_TOMCAT_MAX_THREADS:50}

# HikariCP pool sizing — keep pool small on memory-constrained hosts
# Set via env: SPRING_DATASOURCE_MAX_POOL_SIZE (default 1)
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_MAX_POOL_SIZE:1}
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_MIN_IDLE:1}

# JVM options should be passed by the host/container via an environment variable
# Example (Render environment variables):
# JAVA_OPTS=-Xms256m -Xmx512m -XX:MaxMetaspaceSize=128m
# SPRING_TOMCAT_MAX_THREADS=50
# SPRING_DATASOURCE_MAX_POOL_SIZE=1
# For heavier loads or concurrent Selenium workers increase Xmx (e.g. -Xmx2g)

# Notes:
# - Do NOT hardcode secrets here; use environment variables on the hosting platform.
# - If you plan to run multiple concurrent Selenium jobs, prefer increasing container memory
#   or moving Selenium to a separate worker service so API instances remain lightweight.